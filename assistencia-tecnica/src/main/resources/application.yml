spring:
  application:
    name: assistencia-tecnica
  mail:
    host: smtp.seu-provedor.com
    port: 587
    username: ${MAIL_USER}      # Evite versionar segredos: use variáveis de ambiente
    password: ${MAIL_PASS}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
        debug: false

  datasource:
    url: jdbc:postgresql://localhost:5432/assistencia_tecnica_db
    driver-class-name: org.postgresql.Driver
    username: assistenciatecnica
    password: assistencia@tecnica2025

  jpa:
    hibernate:
      ddl-auto: create   # Flyway controla o schema; use 'none' se não quiser validar.
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true



mail:
  from: "Assistência Técnica <no-reply@seudominio.com>"   # opcional, mas útil

docs:
  template-path: "classpath:static/modelo.docx"           # seu DOCX em src/main/resources/static/
  output-dir: "/var/app/docs/saidas"                      # onde salvar os PDFs gerados
  templates:
    service-order: "classpath:static/modelo-ordem-servico.docx"
    # você pode adicionar outros:
    # budget: "classpath:static/modelo-orcamento.docx"

server:
  port: ${PORTA_API:8080}

